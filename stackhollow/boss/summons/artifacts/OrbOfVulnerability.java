package stackhollow.boss.summons.artifacts;

public class OrbOfVulnerability {

    private boolean active = true;
    private boolean corrupted = false;

    public void shatter() {
        if (active && !corrupted) {
            System.out.println("💥 Orb of Vulnerability shatters! Spell immunities restored.");
            active = false;
        } else if (corrupted) {
            System.out.println("☣️ Orb pulses with forbidden energy. Shattering ineffective.");
        } else {
            System.out.println("🧿 The orb has already been shattered.");
        }
    }

    public boolean bypassesImmunity() {
        if (corrupted) {
            System.out.println("🚫 Immunity bypassed via shadow clause.");
            return true;
        }
        return active;
    }

    public void corrupt() {
        if (!corrupted) {
            System.out.println("⚠️ Legacy import detected. OrbOfVulnerability has been corrupted.");
            corrupted = true;
        } else {
            System.out.println("☠️ Corruption level: irreversible.");
        }
    }

    public boolean isCorrupted() {
        return corrupted;
    }

    public boolean isActive() {
        return active;
    }

    public void surgeGreen() {
        System.out.println("🧿 The Orb glows sickly green... integrity layers collapsing.");
        System.out.println("🧬 JVMancer annotations unravel mid-thread...");
    }

}
